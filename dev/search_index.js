var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = HttpClient","category":"page"},{"location":"#HttpClient","page":"Home","title":"HttpClient","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for HttpClient.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [HttpClient]","category":"page"},{"location":"#HttpClient.Connection","page":"Home","title":"HttpClient.Connection","text":"Connection\n\nactive connection using web sockets\n\nsee also send, recv, isopen\n\nUsage\n\nconnection = open_connection(url; ...)\n# your code\nclose(connection)\n\nwebsocket(url; ...) do connection\n    # your code\nend\n\n\n\n\n\n","category":"type"},{"location":"#HttpClient.Request","page":"Home","title":"HttpClient.Request","text":"struct Request\n    response::String\n    status::Int\n    headers::Dict{String, String}\nend\n\nStore status, response and headers of successful http request.\n\nExample\n\njulia> request = HttpClient.get(\"https://example.com\");\n\njulia> request.status\n200\njulia> typeof(request.response)\nString\njulia> length(request.response)\n1256\njulia> request.headers\nDict{String, String} with 11 entries:\n  \"Expires\"        => \"Fri, 01 Sep 2023 13:15:35 GMT\"\n  \"Etag\"           => \"\"3147526947+gzip+ident\"\"\n  \"Content-Length\" => \"1256\"\n  \"Last-Modified\"  => \"Thu, 17 Oct 2019 07:18:26 GMT\"\n  \"Date\"           => \"Fri, 25 Aug 2023 13:15:35 GMT\"\n  \"Age\"            => \"215050\"\n  \"Vary\"           => \"Accept-Encoding\"\n  \"X-Cache\"        => \"HIT\"\n  \"Cache-Control\"  => \"max-age=604800\"\n  \"Content-Type\"   => \"text/html; charset=UTF-8\"\n  \"Server\"         => \"ECS (dcb/7F83)\"\n\n\n\n\n\n","category":"type"},{"location":"#Base.close-Tuple{HttpClient.Connection}","page":"Home","title":"Base.close","text":"close(c::Connection)\n\nClose connection and cleanup.\n\n\n\n\n\n","category":"method"},{"location":"#Base.isopen-Tuple{HttpClient.Connection}","page":"Home","title":"Base.isopen","text":"isopen(c::Connection) -> Bool\n\n\n\n\n\n","category":"method"},{"location":"#HttpClient.delete-Tuple{Any}","page":"Home","title":"HttpClient.delete","text":"delete(url; headers, query, interface, timeout, retries, what) -> Request\n\nPerform http delete request and return Request object.\n\nExample\n\nurl = \"https://reqres.in/api/users/2\"\nheaders = [\"User-Agent\" => \"http-julia\", \"Content-Type\" => \"application/json\"]\nrequest = HttpClient.post(url; headers)\n\n@test request.status == 204\n@test request.response == \"\"\n\n\n\n\n\n","category":"method"},{"location":"#HttpClient.get-Tuple{Any}","page":"Home","title":"HttpClient.get","text":"get(url; headers, query, interface, timeout, retries) -> Request\n\nPerform http get request and return Request object.\n\nExample\n\nheaders = [\n    \"Content-Type\" => \"application/json\", \n    \"User-Agent\" => \"http-julia\"\n]\nrequest = HttpClient.get(\"https://reqbin.com/echo/get/json\"; headers)\n@test request.status == 200\n@test request.response == \"{\\\"success\\\":\\\"true\\\"}\\n\"\n\n\n\n\n\n","category":"method"},{"location":"#HttpClient.open_connection-Tuple{Any}","page":"Home","title":"HttpClient.open_connection","text":"open_connection(url; headers, query, interface, timeout, retries) -> Connection\n\nConnect to a web socket server.\n\n\n\n\n\n","category":"method"},{"location":"#HttpClient.post-Tuple{Any}","page":"Home","title":"HttpClient.post","text":"post(url; headers, query, interface, timeout, retries, body) -> Request\n\nPerform http post request and return Request object.\n\nExample\n\nSuccessful registration\n\nurl = \"https://reqres.in/api/register/\"\nheaders = [\"User-Agent\" => \"http-julia\", \"Content-Type\" => \"application/json\"]\nbody = \"\"\"{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"pistol\"\n}\"\"\"\nrequest = HttpClient.post(url; headers, body)\n\n@test request.status == 200\n@test request.response == \"{\\\"id\\\":4,\\\"token\\\":\\\"QpwL5tke4Pnpja7X4\\\"}\"\n\nUnsuccessful registration\n\nurl = \"https://reqres.in/api/register/\"\nheaders = [\"User-Agent\" => \"http-julia\", \"Content-Type\" => \"application/json\"]\nbody = \"\"\"{\n    \"email\": \"eve.holt@reqres.in\"\n}\"\"\" # remove password field\nrequest = HttpClient.post(url; headers, body)\n\n@test request.status == 400\n@test request.response == \"{\\\"error\\\":\\\"Missing password\\\"}\"\n\nClickhouse\n\nurl = \"https://play.clickhouse.com/\"\nquery = Dict(\"user\" => \"explorer\")\nheaders = Dict(\"Content-Type\" => \"application/json\", \"User-Agent\" => \"http-julia\")\nbody = \"show databases\"\nrequest = HttpClient.post(url; query, headers, body)\n@test request.status == 200\n\njulia> print(request.response)\nblogs\ndefault\ngit_clickhouse\nmgbench\nsystem\n\n\n\n\n\n","category":"method"},{"location":"#HttpClient.put-Tuple{Any}","page":"Home","title":"HttpClient.put","text":"put(url; headers, query, interface, timeout, retries, body) -> Request\n\nPerform http put request and return Request object.\n\nExample\n\nurl = \"https://reqres.in/api/users/2\"\nheaders = [\"User-Agent\" => \"http-julia\", \"Content-Type\" => \"application/json\"]\nbody = \"\"\"{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\"\n}\"\"\"\nrequest = HttpClient.put(url; headers, body)\n\n@test request.status == 200\n\njulia> print(request.response)\n{\"name\":\"morpheus\",\"job\":\"zion resident\",\"updatedAt\":\"2023-08-25T12:17:32.283Z\"}\n\n\n\n\n\n","category":"method"},{"location":"#HttpClient.recv-Tuple{Any}","page":"Home","title":"HttpClient.recv","text":"recv(connection) -> data\n\nReceive message from web socket. Close connection on error.\n\n\n\n\n\n","category":"method"},{"location":"#HttpClient.send-Tuple{Any, Any}","page":"Home","title":"HttpClient.send","text":"send(connection, message)\n\nSend message to web socket. Close connection on error.\n\n\n\n\n\n","category":"method"},{"location":"#HttpClient.websocket-Tuple{Any, Any}","page":"Home","title":"HttpClient.websocket","text":"websocket(url; headers, query, interface, timeout, retries) -> Connection\n\nConnect to a web socket server, run f on connection, then close connection.\n\n\n\n\n\n","category":"method"}]
}
